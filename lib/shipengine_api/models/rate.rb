=begin
#ShipEngine

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1-SNAPSHOT

=end

require 'date'

module ShipEngineApi

  class Rate
    attr_accessor :rate_id

    attr_accessor :rate_type

    attr_accessor :carrier_id

    attr_accessor :shipping_amount

    attr_accessor :insurance_amount

    attr_accessor :confirmation_amount

    attr_accessor :other_amount

    attr_accessor :zone

    attr_accessor :package_type

    attr_accessor :delivery_days

    attr_accessor :guaranteed_service

    attr_accessor :estimated_delivery_date

    attr_accessor :carrier_delivery_days

    attr_accessor :ship_date

    attr_accessor :negotiated_rate

    attr_accessor :service_type

    attr_accessor :service_code

    attr_accessor :trackable

    attr_accessor :validation_status

    attr_accessor :warning_messages

    attr_accessor :error_messages

    attr_accessor :carrier_code

    attr_accessor :carrier_nickname

    attr_accessor :carrier_friendly_name

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'rate_id' => :'rate_id',
        :'rate_type' => :'rate_type',
        :'carrier_id' => :'carrier_id',
        :'shipping_amount' => :'shipping_amount',
        :'insurance_amount' => :'insurance_amount',
        :'confirmation_amount' => :'confirmation_amount',
        :'other_amount' => :'other_amount',
        :'zone' => :'zone',
        :'package_type' => :'package_type',
        :'delivery_days' => :'delivery_days',
        :'guaranteed_service' => :'guaranteed_service',
        :'estimated_delivery_date' => :'estimated_delivery_date',
        :'carrier_delivery_days' => :'carrier_delivery_days',
        :'ship_date' => :'ship_date',
        :'negotiated_rate' => :'negotiated_rate',
        :'service_type' => :'service_type',
        :'service_code' => :'service_code',
        :'trackable' => :'trackable',
        :'validation_status' => :'validation_status',
        :'warning_messages' => :'warning_messages',
        :'error_messages' => :'error_messages',
        :'carrier_code' => :'carrier_code',
        :'carrier_nickname' => :'carrier_nickname',
        :'carrier_friendly_name' => :'carrier_friendly_name'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'rate_id' => :'String',
        :'rate_type' => :'String',
        :'carrier_id' => :'String',
        :'shipping_amount' => :'MoneyDTO',
        :'insurance_amount' => :'MoneyDTO',
        :'confirmation_amount' => :'MoneyDTO',
        :'other_amount' => :'MoneyDTO',
        :'zone' => :'Integer',
        :'package_type' => :'String',
        :'delivery_days' => :'Integer',
        :'guaranteed_service' => :'BOOLEAN',
        :'estimated_delivery_date' => :'DateTime',
        :'carrier_delivery_days' => :'String',
        :'ship_date' => :'DateTime',
        :'negotiated_rate' => :'BOOLEAN',
        :'service_type' => :'String',
        :'service_code' => :'String',
        :'trackable' => :'BOOLEAN',
        :'validation_status' => :'String',
        :'warning_messages' => :'Array<String>',
        :'error_messages' => :'Array<String>',
        :'carrier_code' => :'String',
        :'carrier_nickname' => :'String',
        :'carrier_friendly_name' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'rate_id')
        self.rate_id = attributes[:'rate_id']
      end

      if attributes.has_key?(:'rate_type')
        self.rate_type = attributes[:'rate_type']
      end

      if attributes.has_key?(:'carrier_id')
        self.carrier_id = attributes[:'carrier_id']
      end

      if attributes.has_key?(:'shipping_amount')
        self.shipping_amount = attributes[:'shipping_amount']
      end

      if attributes.has_key?(:'insurance_amount')
        self.insurance_amount = attributes[:'insurance_amount']
      end

      if attributes.has_key?(:'confirmation_amount')
        self.confirmation_amount = attributes[:'confirmation_amount']
      end

      if attributes.has_key?(:'other_amount')
        self.other_amount = attributes[:'other_amount']
      end

      if attributes.has_key?(:'zone')
        self.zone = attributes[:'zone']
      end

      if attributes.has_key?(:'package_type')
        self.package_type = attributes[:'package_type']
      end

      if attributes.has_key?(:'delivery_days')
        self.delivery_days = attributes[:'delivery_days']
      end

      if attributes.has_key?(:'guaranteed_service')
        self.guaranteed_service = attributes[:'guaranteed_service']
      end

      if attributes.has_key?(:'estimated_delivery_date')
        self.estimated_delivery_date = attributes[:'estimated_delivery_date']
      end

      if attributes.has_key?(:'carrier_delivery_days')
        self.carrier_delivery_days = attributes[:'carrier_delivery_days']
      end

      if attributes.has_key?(:'ship_date')
        self.ship_date = attributes[:'ship_date']
      end

      if attributes.has_key?(:'negotiated_rate')
        self.negotiated_rate = attributes[:'negotiated_rate']
      end

      if attributes.has_key?(:'service_type')
        self.service_type = attributes[:'service_type']
      end

      if attributes.has_key?(:'service_code')
        self.service_code = attributes[:'service_code']
      end

      if attributes.has_key?(:'trackable')
        self.trackable = attributes[:'trackable']
      end

      if attributes.has_key?(:'validation_status')
        self.validation_status = attributes[:'validation_status']
      end

      if attributes.has_key?(:'warning_messages')
        if (value = attributes[:'warning_messages']).is_a?(Array)
          self.warning_messages = value
        end
      end

      if attributes.has_key?(:'error_messages')
        if (value = attributes[:'error_messages']).is_a?(Array)
          self.error_messages = value
        end
      end

      if attributes.has_key?(:'carrier_code')
        self.carrier_code = attributes[:'carrier_code']
      end

      if attributes.has_key?(:'carrier_nickname')
        self.carrier_nickname = attributes[:'carrier_nickname']
      end

      if attributes.has_key?(:'carrier_friendly_name')
        self.carrier_friendly_name = attributes[:'carrier_friendly_name']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      rate_type_validator = EnumAttributeValidator.new('String', ["check", "shipment"])
      return false unless rate_type_validator.valid?(@rate_type)
      validation_status_validator = EnumAttributeValidator.new('String', ["valid", "invalid", "has_warnings", "unknown"])
      return false unless validation_status_validator.valid?(@validation_status)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rate_type Object to be assigned
    def rate_type=(rate_type)
      validator = EnumAttributeValidator.new('String', ["check", "shipment"])
      unless validator.valid?(rate_type)
        fail ArgumentError, "invalid value for 'rate_type', must be one of #{validator.allowable_values}."
      end
      @rate_type = rate_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] validation_status Object to be assigned
    def validation_status=(validation_status)
      validator = EnumAttributeValidator.new('String', ["valid", "invalid", "has_warnings", "unknown"])
      unless validator.valid?(validation_status)
        fail ArgumentError, "invalid value for 'validation_status', must be one of #{validator.allowable_values}."
      end
      @validation_status = validation_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          rate_id == o.rate_id &&
          rate_type == o.rate_type &&
          carrier_id == o.carrier_id &&
          shipping_amount == o.shipping_amount &&
          insurance_amount == o.insurance_amount &&
          confirmation_amount == o.confirmation_amount &&
          other_amount == o.other_amount &&
          zone == o.zone &&
          package_type == o.package_type &&
          delivery_days == o.delivery_days &&
          guaranteed_service == o.guaranteed_service &&
          estimated_delivery_date == o.estimated_delivery_date &&
          carrier_delivery_days == o.carrier_delivery_days &&
          ship_date == o.ship_date &&
          negotiated_rate == o.negotiated_rate &&
          service_type == o.service_type &&
          service_code == o.service_code &&
          trackable == o.trackable &&
          validation_status == o.validation_status &&
          warning_messages == o.warning_messages &&
          error_messages == o.error_messages &&
          carrier_code == o.carrier_code &&
          carrier_nickname == o.carrier_nickname &&
          carrier_friendly_name == o.carrier_friendly_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [rate_id, rate_type, carrier_id, shipping_amount, insurance_amount, confirmation_amount, other_amount, zone, package_type, delivery_days, guaranteed_service, estimated_delivery_date, carrier_delivery_days, ship_date, negotiated_rate, service_type, service_code, trackable, validation_status, warning_messages, error_messages, carrier_code, carrier_nickname, carrier_friendly_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ShipEngineApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
