=begin
#ShipEngine

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1-SNAPSHOT

=end

require 'date'

module ShipEngineApi

  class Label
    attr_accessor :label_id

    attr_accessor :status

    attr_accessor :shipment_id

    attr_accessor :ship_date

    attr_accessor :created_at

    attr_accessor :shipment_cost

    attr_accessor :insurance_cost

    attr_accessor :tracking_number

    attr_accessor :is_return_label

    attr_accessor :is_international

    attr_accessor :batch_id

    attr_accessor :carrier_id

    attr_accessor :service_code

    attr_accessor :package_code

    attr_accessor :voided

    attr_accessor :voided_at

    attr_accessor :label_format

    attr_accessor :label_layout

    attr_accessor :trackable

    attr_accessor :carrier_code

    attr_accessor :tracking_status

    attr_accessor :label_download

    attr_accessor :form_download

    attr_accessor :insurance_claim

    attr_accessor :packages

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'label_id' => :'label_id',
        :'status' => :'status',
        :'shipment_id' => :'shipment_id',
        :'ship_date' => :'ship_date',
        :'created_at' => :'created_at',
        :'shipment_cost' => :'shipment_cost',
        :'insurance_cost' => :'insurance_cost',
        :'tracking_number' => :'tracking_number',
        :'is_return_label' => :'is_return_label',
        :'is_international' => :'is_international',
        :'batch_id' => :'batch_id',
        :'carrier_id' => :'carrier_id',
        :'service_code' => :'service_code',
        :'package_code' => :'package_code',
        :'voided' => :'voided',
        :'voided_at' => :'voided_at',
        :'label_format' => :'label_format',
        :'label_layout' => :'label_layout',
        :'trackable' => :'trackable',
        :'carrier_code' => :'carrier_code',
        :'tracking_status' => :'tracking_status',
        :'label_download' => :'label_download',
        :'form_download' => :'form_download',
        :'insurance_claim' => :'insurance_claim',
        :'packages' => :'packages'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'label_id' => :'String',
        :'status' => :'String',
        :'shipment_id' => :'String',
        :'ship_date' => :'DateTime',
        :'created_at' => :'DateTime',
        :'shipment_cost' => :'MoneyDTO',
        :'insurance_cost' => :'MoneyDTO',
        :'tracking_number' => :'String',
        :'is_return_label' => :'BOOLEAN',
        :'is_international' => :'BOOLEAN',
        :'batch_id' => :'String',
        :'carrier_id' => :'String',
        :'service_code' => :'String',
        :'package_code' => :'String',
        :'voided' => :'BOOLEAN',
        :'voided_at' => :'DateTime',
        :'label_format' => :'String',
        :'label_layout' => :'String',
        :'trackable' => :'BOOLEAN',
        :'carrier_code' => :'String',
        :'tracking_status' => :'String',
        :'label_download' => :'LinkDTO',
        :'form_download' => :'LinkDTO',
        :'insurance_claim' => :'LinkDTO',
        :'packages' => :'Array<LabelPackage>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'label_id')
        self.label_id = attributes[:'label_id']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'shipment_id')
        self.shipment_id = attributes[:'shipment_id']
      end

      if attributes.has_key?(:'ship_date')
        self.ship_date = attributes[:'ship_date']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'shipment_cost')
        self.shipment_cost = attributes[:'shipment_cost']
      end

      if attributes.has_key?(:'insurance_cost')
        self.insurance_cost = attributes[:'insurance_cost']
      end

      if attributes.has_key?(:'tracking_number')
        self.tracking_number = attributes[:'tracking_number']
      end

      if attributes.has_key?(:'is_return_label')
        self.is_return_label = attributes[:'is_return_label']
      end

      if attributes.has_key?(:'is_international')
        self.is_international = attributes[:'is_international']
      end

      if attributes.has_key?(:'batch_id')
        self.batch_id = attributes[:'batch_id']
      end

      if attributes.has_key?(:'carrier_id')
        self.carrier_id = attributes[:'carrier_id']
      end

      if attributes.has_key?(:'service_code')
        self.service_code = attributes[:'service_code']
      end

      if attributes.has_key?(:'package_code')
        self.package_code = attributes[:'package_code']
      end

      if attributes.has_key?(:'voided')
        self.voided = attributes[:'voided']
      end

      if attributes.has_key?(:'voided_at')
        self.voided_at = attributes[:'voided_at']
      end

      if attributes.has_key?(:'label_format')
        self.label_format = attributes[:'label_format']
      end

      if attributes.has_key?(:'label_layout')
        self.label_layout = attributes[:'label_layout']
      end

      if attributes.has_key?(:'trackable')
        self.trackable = attributes[:'trackable']
      end

      if attributes.has_key?(:'carrier_code')
        self.carrier_code = attributes[:'carrier_code']
      end

      if attributes.has_key?(:'tracking_status')
        self.tracking_status = attributes[:'tracking_status']
      end

      if attributes.has_key?(:'label_download')
        self.label_download = attributes[:'label_download']
      end

      if attributes.has_key?(:'form_download')
        self.form_download = attributes[:'form_download']
      end

      if attributes.has_key?(:'insurance_claim')
        self.insurance_claim = attributes[:'insurance_claim']
      end

      if attributes.has_key?(:'packages')
        if (value = attributes[:'packages']).is_a?(Array)
          self.packages = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ["processing", "completed", "error", "voided"])
      return false unless status_validator.valid?(@status)
      label_format_validator = EnumAttributeValidator.new('String', ["pdf", "zpl", "png"])
      return false unless label_format_validator.valid?(@label_format)
      tracking_status_validator = EnumAttributeValidator.new('String', ["unknown", "in_transit", "error", "delivered"])
      return false unless tracking_status_validator.valid?(@tracking_status)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["processing", "completed", "error", "voided"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for 'status', must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] label_format Object to be assigned
    def label_format=(label_format)
      validator = EnumAttributeValidator.new('String', ["pdf", "zpl", "png"])
      unless validator.valid?(label_format)
        fail ArgumentError, "invalid value for 'label_format', must be one of #{validator.allowable_values}."
      end
      @label_format = label_format
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tracking_status Object to be assigned
    def tracking_status=(tracking_status)
      validator = EnumAttributeValidator.new('String', ["unknown", "in_transit", "error", "delivered"])
      unless validator.valid?(tracking_status)
        fail ArgumentError, "invalid value for 'tracking_status', must be one of #{validator.allowable_values}."
      end
      @tracking_status = tracking_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          label_id == o.label_id &&
          status == o.status &&
          shipment_id == o.shipment_id &&
          ship_date == o.ship_date &&
          created_at == o.created_at &&
          shipment_cost == o.shipment_cost &&
          insurance_cost == o.insurance_cost &&
          tracking_number == o.tracking_number &&
          is_return_label == o.is_return_label &&
          is_international == o.is_international &&
          batch_id == o.batch_id &&
          carrier_id == o.carrier_id &&
          service_code == o.service_code &&
          package_code == o.package_code &&
          voided == o.voided &&
          voided_at == o.voided_at &&
          label_format == o.label_format &&
          label_layout == o.label_layout &&
          trackable == o.trackable &&
          carrier_code == o.carrier_code &&
          tracking_status == o.tracking_status &&
          label_download == o.label_download &&
          form_download == o.form_download &&
          insurance_claim == o.insurance_claim &&
          packages == o.packages
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [label_id, status, shipment_id, ship_date, created_at, shipment_cost, insurance_cost, tracking_number, is_return_label, is_international, batch_id, carrier_id, service_code, package_code, voided, voided_at, label_format, label_layout, trackable, carrier_code, tracking_status, label_download, form_download, insurance_claim, packages].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ShipEngineApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
