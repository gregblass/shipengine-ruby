=begin
#ShipEngine

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1-SNAPSHOT

=end

require "uri"

module ShipEngineApi
  class WarehousesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param request 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [WarehouseDTO]
    def warehouses_create(request, api_key, opts = {})
      data, _status_code, _headers = warehouses_create_with_http_info(request, api_key, opts)
      return data
    end

    # 
    # 
    # @param request 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(WarehouseDTO, Fixnum, Hash)>] WarehouseDTO data, response status code and response headers
    def warehouses_create_with_http_info(request, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WarehousesApi.warehouses_create ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling WarehousesApi.warehouses_create"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling WarehousesApi.warehouses_create"
      end
      # resource path
      local_var_path = "/v1/warehouses"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WarehouseDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WarehousesApi#warehouses_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param warehouse_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def warehouses_delete(warehouse_id, api_key, opts = {})
      warehouses_delete_with_http_info(warehouse_id, api_key, opts)
      return nil
    end

    # 
    # 
    # @param warehouse_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def warehouses_delete_with_http_info(warehouse_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WarehousesApi.warehouses_delete ..."
      end
      # verify the required parameter 'warehouse_id' is set
      if @api_client.config.client_side_validation && warehouse_id.nil?
        fail ArgumentError, "Missing the required parameter 'warehouse_id' when calling WarehousesApi.warehouses_delete"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling WarehousesApi.warehouses_delete"
      end
      # resource path
      local_var_path = "/v1/warehouses/{warehouse_id}".sub('{' + 'warehouse_id' + '}', warehouse_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WarehousesApi#warehouses_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param warehouse_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [WarehouseDTO]
    def warehouses_get(warehouse_id, api_key, opts = {})
      data, _status_code, _headers = warehouses_get_with_http_info(warehouse_id, api_key, opts)
      return data
    end

    # 
    # 
    # @param warehouse_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(WarehouseDTO, Fixnum, Hash)>] WarehouseDTO data, response status code and response headers
    def warehouses_get_with_http_info(warehouse_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WarehousesApi.warehouses_get ..."
      end
      # verify the required parameter 'warehouse_id' is set
      if @api_client.config.client_side_validation && warehouse_id.nil?
        fail ArgumentError, "Missing the required parameter 'warehouse_id' when calling WarehousesApi.warehouses_get"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling WarehousesApi.warehouses_get"
      end
      # resource path
      local_var_path = "/v1/warehouses/{warehouse_id}".sub('{' + 'warehouse_id' + '}', warehouse_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WarehouseDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WarehousesApi#warehouses_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [WarehouseListDTO]
    def warehouses_list(api_key, opts = {})
      data, _status_code, _headers = warehouses_list_with_http_info(api_key, opts)
      return data
    end

    # 
    # 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(WarehouseListDTO, Fixnum, Hash)>] WarehouseListDTO data, response status code and response headers
    def warehouses_list_with_http_info(api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WarehousesApi.warehouses_list ..."
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling WarehousesApi.warehouses_list"
      end
      # resource path
      local_var_path = "/v1/warehouses"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'WarehouseListDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WarehousesApi#warehouses_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param warehouse_id 
    # @param request 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def warehouses_update(warehouse_id, request, api_key, opts = {})
      warehouses_update_with_http_info(warehouse_id, request, api_key, opts)
      return nil
    end

    # 
    # 
    # @param warehouse_id 
    # @param request 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def warehouses_update_with_http_info(warehouse_id, request, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: WarehousesApi.warehouses_update ..."
      end
      # verify the required parameter 'warehouse_id' is set
      if @api_client.config.client_side_validation && warehouse_id.nil?
        fail ArgumentError, "Missing the required parameter 'warehouse_id' when calling WarehousesApi.warehouses_update"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling WarehousesApi.warehouses_update"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling WarehousesApi.warehouses_update"
      end
      # resource path
      local_var_path = "/v1/warehouses/{warehouse_id}".sub('{' + 'warehouse_id' + '}', warehouse_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WarehousesApi#warehouses_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
