=begin
#ShipEngine

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1-SNAPSHOT

=end

require "uri"

module ShipEngineApi
  class CarrierAccountsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [ConnectAccountResponseDTO]
    def access_worldwide_account_carrier_connect_account(model, api_key, opts = {})
      data, _status_code, _headers = access_worldwide_account_carrier_connect_account_with_http_info(model, api_key, opts)
      return data
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectAccountResponseDTO, Fixnum, Hash)>] ConnectAccountResponseDTO data, response status code and response headers
    def access_worldwide_account_carrier_connect_account_with_http_info(model, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.access_worldwide_account_carrier_connect_account ..."
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling CarrierAccountsApi.access_worldwide_account_carrier_connect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.access_worldwide_account_carrier_connect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/access_worldwide"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectAccountResponseDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#access_worldwide_account_carrier_connect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def access_worldwide_account_carrier_disconnect_account(carrier_id, api_key, opts = {})
      access_worldwide_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def access_worldwide_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.access_worldwide_account_carrier_disconnect_account ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.access_worldwide_account_carrier_disconnect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.access_worldwide_account_carrier_disconnect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/access_worldwide/{carrier_id}".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#access_worldwide_account_carrier_disconnect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [ConnectAccountResponseDTO]
    def apc_account_carrier_connect_account(model, api_key, opts = {})
      data, _status_code, _headers = apc_account_carrier_connect_account_with_http_info(model, api_key, opts)
      return data
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectAccountResponseDTO, Fixnum, Hash)>] ConnectAccountResponseDTO data, response status code and response headers
    def apc_account_carrier_connect_account_with_http_info(model, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.apc_account_carrier_connect_account ..."
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling CarrierAccountsApi.apc_account_carrier_connect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.apc_account_carrier_connect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/apc"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectAccountResponseDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#apc_account_carrier_connect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def apc_account_carrier_disconnect_account(carrier_id, api_key, opts = {})
      apc_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def apc_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.apc_account_carrier_disconnect_account ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.apc_account_carrier_disconnect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.apc_account_carrier_disconnect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/apc/{carrier_id}".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#apc_account_carrier_disconnect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [ConnectAccountResponseDTO]
    def asendia_account_carrier_connect_account(model, api_key, opts = {})
      data, _status_code, _headers = asendia_account_carrier_connect_account_with_http_info(model, api_key, opts)
      return data
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectAccountResponseDTO, Fixnum, Hash)>] ConnectAccountResponseDTO data, response status code and response headers
    def asendia_account_carrier_connect_account_with_http_info(model, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.asendia_account_carrier_connect_account ..."
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling CarrierAccountsApi.asendia_account_carrier_connect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.asendia_account_carrier_connect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/asendia"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectAccountResponseDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#asendia_account_carrier_connect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def asendia_account_carrier_disconnect_account(carrier_id, api_key, opts = {})
      asendia_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def asendia_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.asendia_account_carrier_disconnect_account ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.asendia_account_carrier_disconnect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.asendia_account_carrier_disconnect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/asendia/{carrier_id}".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#asendia_account_carrier_disconnect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [ConnectAccountResponseDTO]
    def d_hl_express_account_carrier_connect_account(model, api_key, opts = {})
      data, _status_code, _headers = d_hl_express_account_carrier_connect_account_with_http_info(model, api_key, opts)
      return data
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectAccountResponseDTO, Fixnum, Hash)>] ConnectAccountResponseDTO data, response status code and response headers
    def d_hl_express_account_carrier_connect_account_with_http_info(model, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.d_hl_express_account_carrier_connect_account ..."
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling CarrierAccountsApi.d_hl_express_account_carrier_connect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.d_hl_express_account_carrier_connect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/dhl_express"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectAccountResponseDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#d_hl_express_account_carrier_connect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def d_hl_express_account_carrier_disconnect_account(carrier_id, api_key, opts = {})
      d_hl_express_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def d_hl_express_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.d_hl_express_account_carrier_disconnect_account ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.d_hl_express_account_carrier_disconnect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.d_hl_express_account_carrier_disconnect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/dhl_express/{carrier_id}".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#d_hl_express_account_carrier_disconnect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param settings 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def d_hl_express_account_carrier_update_settings(carrier_id, settings, api_key, opts = {})
      d_hl_express_account_carrier_update_settings_with_http_info(carrier_id, settings, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param settings 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def d_hl_express_account_carrier_update_settings_with_http_info(carrier_id, settings, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.d_hl_express_account_carrier_update_settings ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.d_hl_express_account_carrier_update_settings"
      end
      # verify the required parameter 'settings' is set
      if @api_client.config.client_side_validation && settings.nil?
        fail ArgumentError, "Missing the required parameter 'settings' when calling CarrierAccountsApi.d_hl_express_account_carrier_update_settings"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.d_hl_express_account_carrier_update_settings"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/dhl_express/{carrier_id}/settings".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(settings)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#d_hl_express_account_carrier_update_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [ConnectAccountResponseDTO]
    def endicia_account_carrier_connect_account(model, api_key, opts = {})
      data, _status_code, _headers = endicia_account_carrier_connect_account_with_http_info(model, api_key, opts)
      return data
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectAccountResponseDTO, Fixnum, Hash)>] ConnectAccountResponseDTO data, response status code and response headers
    def endicia_account_carrier_connect_account_with_http_info(model, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.endicia_account_carrier_connect_account ..."
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling CarrierAccountsApi.endicia_account_carrier_connect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.endicia_account_carrier_connect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/endicia"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectAccountResponseDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#endicia_account_carrier_connect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def endicia_account_carrier_disconnect_account(carrier_id, api_key, opts = {})
      endicia_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def endicia_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.endicia_account_carrier_disconnect_account ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.endicia_account_carrier_disconnect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.endicia_account_carrier_disconnect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/endicia/{carrier_id}".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#endicia_account_carrier_disconnect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [ConnectAccountResponseDTO]
    def fed_ex_account_carrier_connect_account(model, api_key, opts = {})
      data, _status_code, _headers = fed_ex_account_carrier_connect_account_with_http_info(model, api_key, opts)
      return data
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectAccountResponseDTO, Fixnum, Hash)>] ConnectAccountResponseDTO data, response status code and response headers
    def fed_ex_account_carrier_connect_account_with_http_info(model, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.fed_ex_account_carrier_connect_account ..."
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling CarrierAccountsApi.fed_ex_account_carrier_connect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.fed_ex_account_carrier_connect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/fedex"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectAccountResponseDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#fed_ex_account_carrier_connect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def fed_ex_account_carrier_disconnect_account(carrier_id, api_key, opts = {})
      fed_ex_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def fed_ex_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.fed_ex_account_carrier_disconnect_account ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.fed_ex_account_carrier_disconnect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.fed_ex_account_carrier_disconnect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/fedex/{carrier_id}".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#fed_ex_account_carrier_disconnect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param settings 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def fed_ex_account_carrier_update_settings(carrier_id, settings, api_key, opts = {})
      fed_ex_account_carrier_update_settings_with_http_info(carrier_id, settings, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param settings 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def fed_ex_account_carrier_update_settings_with_http_info(carrier_id, settings, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.fed_ex_account_carrier_update_settings ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.fed_ex_account_carrier_update_settings"
      end
      # verify the required parameter 'settings' is set
      if @api_client.config.client_side_validation && settings.nil?
        fail ArgumentError, "Missing the required parameter 'settings' when calling CarrierAccountsApi.fed_ex_account_carrier_update_settings"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.fed_ex_account_carrier_update_settings"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/fedex/{carrier_id}/settings".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(settings)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#fed_ex_account_carrier_update_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [ConnectAccountResponseDTO]
    def first_mile_account_carrier_connect_account(model, api_key, opts = {})
      data, _status_code, _headers = first_mile_account_carrier_connect_account_with_http_info(model, api_key, opts)
      return data
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectAccountResponseDTO, Fixnum, Hash)>] ConnectAccountResponseDTO data, response status code and response headers
    def first_mile_account_carrier_connect_account_with_http_info(model, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.first_mile_account_carrier_connect_account ..."
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling CarrierAccountsApi.first_mile_account_carrier_connect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.first_mile_account_carrier_connect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/firstmile"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectAccountResponseDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#first_mile_account_carrier_connect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def first_mile_account_carrier_disconnect_account(carrier_id, api_key, opts = {})
      first_mile_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def first_mile_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.first_mile_account_carrier_disconnect_account ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.first_mile_account_carrier_disconnect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.first_mile_account_carrier_disconnect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/firstmile/{carrier_id}".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#first_mile_account_carrier_disconnect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [ConnectAccountResponseDTO]
    def globegistics_account_carrier_connect_account(model, api_key, opts = {})
      data, _status_code, _headers = globegistics_account_carrier_connect_account_with_http_info(model, api_key, opts)
      return data
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectAccountResponseDTO, Fixnum, Hash)>] ConnectAccountResponseDTO data, response status code and response headers
    def globegistics_account_carrier_connect_account_with_http_info(model, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.globegistics_account_carrier_connect_account ..."
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling CarrierAccountsApi.globegistics_account_carrier_connect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.globegistics_account_carrier_connect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/globegistics"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectAccountResponseDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#globegistics_account_carrier_connect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def globegistics_account_carrier_disconnect_account(carrier_id, api_key, opts = {})
      globegistics_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def globegistics_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.globegistics_account_carrier_disconnect_account ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.globegistics_account_carrier_disconnect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.globegistics_account_carrier_disconnect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/globegistics/{carrier_id}".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#globegistics_account_carrier_disconnect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [ConnectAccountResponseDTO]
    def imex_account_carrier_connect_account(model, api_key, opts = {})
      data, _status_code, _headers = imex_account_carrier_connect_account_with_http_info(model, api_key, opts)
      return data
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectAccountResponseDTO, Fixnum, Hash)>] ConnectAccountResponseDTO data, response status code and response headers
    def imex_account_carrier_connect_account_with_http_info(model, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.imex_account_carrier_connect_account ..."
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling CarrierAccountsApi.imex_account_carrier_connect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.imex_account_carrier_connect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/imex"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectAccountResponseDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#imex_account_carrier_connect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def imex_account_carrier_disconnect_account(carrier_id, api_key, opts = {})
      imex_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def imex_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.imex_account_carrier_disconnect_account ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.imex_account_carrier_disconnect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.imex_account_carrier_disconnect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/imex/{carrier_id}".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#imex_account_carrier_disconnect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [ConnectAccountResponseDTO]
    def newgistics_account_carrier_connect_account(model, api_key, opts = {})
      data, _status_code, _headers = newgistics_account_carrier_connect_account_with_http_info(model, api_key, opts)
      return data
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectAccountResponseDTO, Fixnum, Hash)>] ConnectAccountResponseDTO data, response status code and response headers
    def newgistics_account_carrier_connect_account_with_http_info(model, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.newgistics_account_carrier_connect_account ..."
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling CarrierAccountsApi.newgistics_account_carrier_connect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.newgistics_account_carrier_connect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/newgistics"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectAccountResponseDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#newgistics_account_carrier_connect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newgistics_account_carrier_disconnect_account(carrier_id, api_key, opts = {})
      newgistics_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newgistics_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.newgistics_account_carrier_disconnect_account ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.newgistics_account_carrier_disconnect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.newgistics_account_carrier_disconnect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/newgistics/{carrier_id}".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#newgistics_account_carrier_disconnect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param settings 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def newgistics_account_carrier_update_settings(carrier_id, settings, api_key, opts = {})
      newgistics_account_carrier_update_settings_with_http_info(carrier_id, settings, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param settings 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def newgistics_account_carrier_update_settings_with_http_info(carrier_id, settings, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.newgistics_account_carrier_update_settings ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.newgistics_account_carrier_update_settings"
      end
      # verify the required parameter 'settings' is set
      if @api_client.config.client_side_validation && settings.nil?
        fail ArgumentError, "Missing the required parameter 'settings' when calling CarrierAccountsApi.newgistics_account_carrier_update_settings"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.newgistics_account_carrier_update_settings"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/newgistics/{carrier_id}/settings".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(settings)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#newgistics_account_carrier_update_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [ConnectAccountResponseDTO]
    def on_trac_account_carrier_connect_account(model, api_key, opts = {})
      data, _status_code, _headers = on_trac_account_carrier_connect_account_with_http_info(model, api_key, opts)
      return data
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectAccountResponseDTO, Fixnum, Hash)>] ConnectAccountResponseDTO data, response status code and response headers
    def on_trac_account_carrier_connect_account_with_http_info(model, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.on_trac_account_carrier_connect_account ..."
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling CarrierAccountsApi.on_trac_account_carrier_connect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.on_trac_account_carrier_connect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/ontrac"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectAccountResponseDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#on_trac_account_carrier_connect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def on_trac_account_carrier_disconnect_account(carrier_id, api_key, opts = {})
      on_trac_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def on_trac_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.on_trac_account_carrier_disconnect_account ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.on_trac_account_carrier_disconnect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.on_trac_account_carrier_disconnect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/ontrac/{carrier_id}".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#on_trac_account_carrier_disconnect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [ConnectAccountResponseDTO]
    def rr_donnelley_account_carrier_connect_account(model, api_key, opts = {})
      data, _status_code, _headers = rr_donnelley_account_carrier_connect_account_with_http_info(model, api_key, opts)
      return data
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectAccountResponseDTO, Fixnum, Hash)>] ConnectAccountResponseDTO data, response status code and response headers
    def rr_donnelley_account_carrier_connect_account_with_http_info(model, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.rr_donnelley_account_carrier_connect_account ..."
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling CarrierAccountsApi.rr_donnelley_account_carrier_connect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.rr_donnelley_account_carrier_connect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/rr_donnelley"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectAccountResponseDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#rr_donnelley_account_carrier_connect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rr_donnelley_account_carrier_disconnect_account(carrier_id, api_key, opts = {})
      rr_donnelley_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def rr_donnelley_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.rr_donnelley_account_carrier_disconnect_account ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.rr_donnelley_account_carrier_disconnect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.rr_donnelley_account_carrier_disconnect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/rr_donnelley/{carrier_id}".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#rr_donnelley_account_carrier_disconnect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [ConnectAccountResponseDTO]
    def stamps_account_carrier_connect_account(model, api_key, opts = {})
      data, _status_code, _headers = stamps_account_carrier_connect_account_with_http_info(model, api_key, opts)
      return data
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectAccountResponseDTO, Fixnum, Hash)>] ConnectAccountResponseDTO data, response status code and response headers
    def stamps_account_carrier_connect_account_with_http_info(model, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.stamps_account_carrier_connect_account ..."
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling CarrierAccountsApi.stamps_account_carrier_connect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.stamps_account_carrier_connect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/stamps_com"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectAccountResponseDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#stamps_account_carrier_connect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def stamps_account_carrier_disconnect_account(carrier_id, api_key, opts = {})
      stamps_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def stamps_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.stamps_account_carrier_disconnect_account ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.stamps_account_carrier_disconnect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.stamps_account_carrier_disconnect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/stamps_com/{carrier_id}".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#stamps_account_carrier_disconnect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [ConnectAccountResponseDTO]
    def u_ps_account_carrier_connect_account(model, api_key, opts = {})
      data, _status_code, _headers = u_ps_account_carrier_connect_account_with_http_info(model, api_key, opts)
      return data
    end

    # 
    # 
    # @param model 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectAccountResponseDTO, Fixnum, Hash)>] ConnectAccountResponseDTO data, response status code and response headers
    def u_ps_account_carrier_connect_account_with_http_info(model, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.u_ps_account_carrier_connect_account ..."
      end
      # verify the required parameter 'model' is set
      if @api_client.config.client_side_validation && model.nil?
        fail ArgumentError, "Missing the required parameter 'model' when calling CarrierAccountsApi.u_ps_account_carrier_connect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.u_ps_account_carrier_connect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/ups"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(model)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ConnectAccountResponseDTO')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#u_ps_account_carrier_connect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def u_ps_account_carrier_disconnect_account(carrier_id, api_key, opts = {})
      u_ps_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def u_ps_account_carrier_disconnect_account_with_http_info(carrier_id, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.u_ps_account_carrier_disconnect_account ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.u_ps_account_carrier_disconnect_account"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.u_ps_account_carrier_disconnect_account"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/ups/{carrier_id}".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#u_ps_account_carrier_disconnect_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param carrier_id 
    # @param settings 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def u_ps_account_carrier_update_settings(carrier_id, settings, api_key, opts = {})
      u_ps_account_carrier_update_settings_with_http_info(carrier_id, settings, api_key, opts)
      return nil
    end

    # 
    # 
    # @param carrier_id 
    # @param settings 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def u_ps_account_carrier_update_settings_with_http_info(carrier_id, settings, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CarrierAccountsApi.u_ps_account_carrier_update_settings ..."
      end
      # verify the required parameter 'carrier_id' is set
      if @api_client.config.client_side_validation && carrier_id.nil?
        fail ArgumentError, "Missing the required parameter 'carrier_id' when calling CarrierAccountsApi.u_ps_account_carrier_update_settings"
      end
      # verify the required parameter 'settings' is set
      if @api_client.config.client_side_validation && settings.nil?
        fail ArgumentError, "Missing the required parameter 'settings' when calling CarrierAccountsApi.u_ps_account_carrier_update_settings"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling CarrierAccountsApi.u_ps_account_carrier_update_settings"
      end
      # resource path
      local_var_path = "/v1/connections/carriers/ups/{carrier_id}/settings".sub('{' + 'carrier_id' + '}', carrier_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])
      header_params[:'api-key'] = api_key

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(settings)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CarrierAccountsApi#u_ps_account_carrier_update_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
