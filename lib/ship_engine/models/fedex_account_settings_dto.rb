=begin
#ShipEngine

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require 'date'

module ShipEngine

  class FedExAccountSettingsDTO
    attr_accessor :nickname

    attr_accessor :pickup_type

    attr_accessor :smart_post_hub

    attr_accessor :smart_post_endorsement

    attr_accessor :is_primary_account

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'nickname' => :'nickname',
        :'pickup_type' => :'pickup_type',
        :'smart_post_hub' => :'smart_post_hub',
        :'smart_post_endorsement' => :'smart_post_endorsement',
        :'is_primary_account' => :'is_primary_account'
      }
    end

    # Attribute type mapping.
    def self.ship_engine_types
      {
        :'nickname' => :'String',
        :'pickup_type' => :'String',
        :'smart_post_hub' => :'String',
        :'smart_post_endorsement' => :'String',
        :'is_primary_account' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'nickname')
        self.nickname = attributes[:'nickname']
      end

      if attributes.has_key?(:'pickup_type')
        self.pickup_type = attributes[:'pickup_type']
      end

      if attributes.has_key?(:'smart_post_hub')
        self.smart_post_hub = attributes[:'smart_post_hub']
      end

      if attributes.has_key?(:'smart_post_endorsement')
        self.smart_post_endorsement = attributes[:'smart_post_endorsement']
      end

      if attributes.has_key?(:'is_primary_account')
        self.is_primary_account = attributes[:'is_primary_account']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      pickup_type_validator = EnumAttributeValidator.new('String', ["none", "regular_pickup", "request_courier", "drop_box", "business_service_center", "station"])
      return false unless pickup_type_validator.valid?(@pickup_type)
      smart_post_hub_validator = EnumAttributeValidator.new('String', ["none", "allentown_pa", "atlanta_ga", "charlotte_nc", "chino_ca", "dallas_tx", "denver_co", "detroit_mi", "edison_nj", "grove_city_oh", "groveport_oh", "houston_tx", "indianapolis_in", "kansas_city_ks", "los_angeles_ca", "martinsburg_wv", "memphis_tn", "minneapolis_mn", "new_berlin_wi", "northborough_ma", "orlando_fl", "phoneix_az", "pittsburgh_pa", "reno_nv", "sacramento_ca", "salt_lake_city_ut", "seattle_wa", "st_louis_mo"])
      return false unless smart_post_hub_validator.valid?(@smart_post_hub)
      smart_post_endorsement_validator = EnumAttributeValidator.new('String', ["none", "return_service_requested", "forwarding_service_requested", "address_service_requested", "change_service_requested", "leave_if_no_response"])
      return false unless smart_post_endorsement_validator.valid?(@smart_post_endorsement)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pickup_type Object to be assigned
    def pickup_type=(pickup_type)
      validator = EnumAttributeValidator.new('String', ["none", "regular_pickup", "request_courier", "drop_box", "business_service_center", "station"])
      unless validator.valid?(pickup_type)
        fail ArgumentError, "invalid value for 'pickup_type', must be one of #{validator.allowable_values}."
      end
      @pickup_type = pickup_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] smart_post_hub Object to be assigned
    def smart_post_hub=(smart_post_hub)
      validator = EnumAttributeValidator.new('String', ["none", "allentown_pa", "atlanta_ga", "charlotte_nc", "chino_ca", "dallas_tx", "denver_co", "detroit_mi", "edison_nj", "grove_city_oh", "groveport_oh", "houston_tx", "indianapolis_in", "kansas_city_ks", "los_angeles_ca", "martinsburg_wv", "memphis_tn", "minneapolis_mn", "new_berlin_wi", "northborough_ma", "orlando_fl", "phoneix_az", "pittsburgh_pa", "reno_nv", "sacramento_ca", "salt_lake_city_ut", "seattle_wa", "st_louis_mo"])
      unless validator.valid?(smart_post_hub)
        fail ArgumentError, "invalid value for 'smart_post_hub', must be one of #{validator.allowable_values}."
      end
      @smart_post_hub = smart_post_hub
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] smart_post_endorsement Object to be assigned
    def smart_post_endorsement=(smart_post_endorsement)
      validator = EnumAttributeValidator.new('String', ["none", "return_service_requested", "forwarding_service_requested", "address_service_requested", "change_service_requested", "leave_if_no_response"])
      unless validator.valid?(smart_post_endorsement)
        fail ArgumentError, "invalid value for 'smart_post_endorsement', must be one of #{validator.allowable_values}."
      end
      @smart_post_endorsement = smart_post_endorsement
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          nickname == o.nickname &&
          pickup_type == o.pickup_type &&
          smart_post_hub == o.smart_post_hub &&
          smart_post_endorsement == o.smart_post_endorsement &&
          is_primary_account == o.is_primary_account
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [nickname, pickup_type, smart_post_hub, smart_post_endorsement, is_primary_account].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.ship_engine_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ShipEngine.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
