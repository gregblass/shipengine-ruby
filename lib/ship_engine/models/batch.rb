=begin
#ShipEngine

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require 'date'

module ShipEngine

  class Batch
    attr_accessor :batch_id

    attr_accessor :external_batch_id

    attr_accessor :batch_notes

    attr_accessor :created_at

    attr_accessor :processed_at

    attr_accessor :errors

    attr_accessor :warnings

    attr_accessor :completed

    attr_accessor :forms

    attr_accessor :count

    attr_accessor :batch_shipments_url

    attr_accessor :batch_labels_url

    attr_accessor :batch_errors_url

    attr_accessor :label_download

    attr_accessor :form_download

    attr_accessor :status

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'batch_id' => :'batch_id',
        :'external_batch_id' => :'external_batch_id',
        :'batch_notes' => :'batch_notes',
        :'created_at' => :'created_at',
        :'processed_at' => :'processed_at',
        :'errors' => :'errors',
        :'warnings' => :'warnings',
        :'completed' => :'completed',
        :'forms' => :'forms',
        :'count' => :'count',
        :'batch_shipments_url' => :'batch_shipments_url',
        :'batch_labels_url' => :'batch_labels_url',
        :'batch_errors_url' => :'batch_errors_url',
        :'label_download' => :'label_download',
        :'form_download' => :'form_download',
        :'status' => :'status'
      }
    end

    # Attribute type mapping.
    def self.ship_engine_types
      {
        :'batch_id' => :'String',
        :'external_batch_id' => :'String',
        :'batch_notes' => :'String',
        :'created_at' => :'DateTime',
        :'processed_at' => :'DateTime',
        :'errors' => :'Integer',
        :'warnings' => :'Integer',
        :'completed' => :'Integer',
        :'forms' => :'Integer',
        :'count' => :'Integer',
        :'batch_shipments_url' => :'LinkDTO',
        :'batch_labels_url' => :'LinkDTO',
        :'batch_errors_url' => :'LinkDTO',
        :'label_download' => :'LinkDTO',
        :'form_download' => :'LinkDTO',
        :'status' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'batch_id')
        self.batch_id = attributes[:'batch_id']
      end

      if attributes.has_key?(:'external_batch_id')
        self.external_batch_id = attributes[:'external_batch_id']
      end

      if attributes.has_key?(:'batch_notes')
        self.batch_notes = attributes[:'batch_notes']
      end

      if attributes.has_key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.has_key?(:'processed_at')
        self.processed_at = attributes[:'processed_at']
      end

      if attributes.has_key?(:'errors')
        self.errors = attributes[:'errors']
      end

      if attributes.has_key?(:'warnings')
        self.warnings = attributes[:'warnings']
      end

      if attributes.has_key?(:'completed')
        self.completed = attributes[:'completed']
      end

      if attributes.has_key?(:'forms')
        self.forms = attributes[:'forms']
      end

      if attributes.has_key?(:'count')
        self.count = attributes[:'count']
      end

      if attributes.has_key?(:'batch_shipments_url')
        self.batch_shipments_url = attributes[:'batch_shipments_url']
      end

      if attributes.has_key?(:'batch_labels_url')
        self.batch_labels_url = attributes[:'batch_labels_url']
      end

      if attributes.has_key?(:'batch_errors_url')
        self.batch_errors_url = attributes[:'batch_errors_url']
      end

      if attributes.has_key?(:'label_download')
        self.label_download = attributes[:'label_download']
      end

      if attributes.has_key?(:'form_download')
        self.form_download = attributes[:'form_download']
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ["open", "queued", "processing", "completed", "completed_with_errors", "archived", "notifying", "invalid"])
      return false unless status_validator.valid?(@status)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["open", "queued", "processing", "completed", "completed_with_errors", "archived", "notifying", "invalid"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for 'status', must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          batch_id == o.batch_id &&
          external_batch_id == o.external_batch_id &&
          batch_notes == o.batch_notes &&
          created_at == o.created_at &&
          processed_at == o.processed_at &&
          errors == o.errors &&
          warnings == o.warnings &&
          completed == o.completed &&
          forms == o.forms &&
          count == o.count &&
          batch_shipments_url == o.batch_shipments_url &&
          batch_labels_url == o.batch_labels_url &&
          batch_errors_url == o.batch_errors_url &&
          label_download == o.label_download &&
          form_download == o.form_download &&
          status == o.status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [batch_id, external_batch_id, batch_notes, created_at, processed_at, errors, warnings, completed, forms, count, batch_shipments_url, batch_labels_url, batch_errors_url, label_download, form_download, status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.ship_engine_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = ShipEngine.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
