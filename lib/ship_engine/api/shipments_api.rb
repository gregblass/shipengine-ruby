=begin
#ShipEngine

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module ShipEngine
  class ShipmentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param shipment_id 
    # @param tag 
    # @param [Hash] opts the optional parameters
    # @return [ShipmentAddTagResponse]
    def add_tag(shipment_id, tag, opts = {})
      data, _status_code, _headers = add_tag_with_http_info(shipment_id, tag, opts)
      return data
    end

    # 
    # 
    # @param shipment_id 
    # @param tag 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShipmentAddTagResponse, Fixnum, Hash)>] ShipmentAddTagResponse data, response status code and response headers
    def add_tag_with_http_info(shipment_id, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShipmentsApi.add_tag ..."
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling ShipmentsApi.add_tag"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling ShipmentsApi.add_tag"
      end
      # resource path
      local_var_path = "/v1/shipments/{shipment_id}/tags/{tag}".sub('{' + 'shipment_id' + '}', shipment_id.to_s).sub('{' + 'tag' + '}', tag.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShipmentAddTagResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShipmentsApi#add_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param shipment_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def cancel(shipment_id, opts = {})
      cancel_with_http_info(shipment_id, opts)
      return nil
    end

    # 
    # 
    # @param shipment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def cancel_with_http_info(shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShipmentsApi.cancel ..."
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling ShipmentsApi.cancel"
      end
      # resource path
      local_var_path = "/v1/shipments/{shipment_id}/cancel".sub('{' + 'shipment_id' + '}', shipment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShipmentsApi#cancel\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param shipments_request 
    # @param [Hash] opts the optional parameters
    # @return [CreateShipmentsResponse]
    def create(shipments_request, opts = {})
      data, _status_code, _headers = create_with_http_info(shipments_request, opts)
      return data
    end

    # 
    # 
    # @param shipments_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateShipmentsResponse, Fixnum, Hash)>] CreateShipmentsResponse data, response status code and response headers
    def create_with_http_info(shipments_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShipmentsApi.create ..."
      end
      # verify the required parameter 'shipments_request' is set
      if @api_client.config.client_side_validation && shipments_request.nil?
        fail ArgumentError, "Missing the required parameter 'shipments_request' when calling ShipmentsApi.create"
      end
      # resource path
      local_var_path = "/v1/shipments"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(shipments_request)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CreateShipmentsResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShipmentsApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param shipment_id 
    # @param [Hash] opts the optional parameters
    # @return [Shipment]
    def get(shipment_id, opts = {})
      data, _status_code, _headers = get_with_http_info(shipment_id, opts)
      return data
    end

    # 
    # 
    # @param shipment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Shipment, Fixnum, Hash)>] Shipment data, response status code and response headers
    def get_with_http_info(shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShipmentsApi.get ..."
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling ShipmentsApi.get"
      end
      # resource path
      local_var_path = "/v1/shipments/{shipment_id}".sub('{' + 'shipment_id' + '}', shipment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Shipment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShipmentsApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param external_shipment_id 
    # @param [Hash] opts the optional parameters
    # @return [Shipment]
    def get_by_external_id(external_shipment_id, opts = {})
      data, _status_code, _headers = get_by_external_id_with_http_info(external_shipment_id, opts)
      return data
    end

    # 
    # 
    # @param external_shipment_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Shipment, Fixnum, Hash)>] Shipment data, response status code and response headers
    def get_by_external_id_with_http_info(external_shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShipmentsApi.get_by_external_id ..."
      end
      # verify the required parameter 'external_shipment_id' is set
      if @api_client.config.client_side_validation && external_shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_shipment_id' when calling ShipmentsApi.get_by_external_id"
      end
      # resource path
      local_var_path = "/v1/shipments/external_shipment_id/{external_shipment_id}".sub('{' + 'external_shipment_id' + '}', external_shipment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Shipment')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShipmentsApi#get_by_external_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param shipment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :created_at_start 
    # @return [RateResponse]
    def get_rates_for_shipment(shipment_id, opts = {})
      data, _status_code, _headers = get_rates_for_shipment_with_http_info(shipment_id, opts)
      return data
    end

    # 
    # 
    # @param shipment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [DateTime] :created_at_start 
    # @return [Array<(RateResponse, Fixnum, Hash)>] RateResponse data, response status code and response headers
    def get_rates_for_shipment_with_http_info(shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShipmentsApi.get_rates_for_shipment ..."
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling ShipmentsApi.get_rates_for_shipment"
      end
      # resource path
      local_var_path = "/v1/shipments/{shipment_id}/rates".sub('{' + 'shipment_id' + '}', shipment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'created_at_start'] = opts[:'created_at_start'] if !opts[:'created_at_start'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RateResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShipmentsApi#get_rates_for_shipment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :batch_id 
    # @option opts [String] :tag 
    # @option opts [String] :shipment_status 
    # @option opts [DateTime] :modified_at_start 
    # @option opts [DateTime] :modified_at_end 
    # @option opts [DateTime] :created_at_start 
    # @option opts [DateTime] :created_at_end 
    # @option opts [Integer] :page 
    # @option opts [Integer] :page_size 
    # @option opts [String] :sort_dir 
    # @option opts [String] :sort_by 
    # @return [ListShipmentResponse]
    def list(opts = {})
      data, _status_code, _headers = list_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :batch_id 
    # @option opts [String] :tag 
    # @option opts [String] :shipment_status 
    # @option opts [DateTime] :modified_at_start 
    # @option opts [DateTime] :modified_at_end 
    # @option opts [DateTime] :created_at_start 
    # @option opts [DateTime] :created_at_end 
    # @option opts [Integer] :page 
    # @option opts [Integer] :page_size 
    # @option opts [String] :sort_dir 
    # @option opts [String] :sort_by 
    # @return [Array<(ListShipmentResponse, Fixnum, Hash)>] ListShipmentResponse data, response status code and response headers
    def list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShipmentsApi.list ..."
      end
      if @api_client.config.client_side_validation && opts[:'shipment_status'] && !['pending', 'processing', 'label_purchased', 'cancelled'].include?(opts[:'shipment_status'])
        fail ArgumentError, 'invalid value for "shipment_status", must be one of pending, processing, label_purchased, cancelled'
      end
      if @api_client.config.client_side_validation && opts[:'sort_dir'] && !['asc', 'desc'].include?(opts[:'sort_dir'])
        fail ArgumentError, 'invalid value for "sort_dir", must be one of asc, desc'
      end
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !['modified_at', 'created_at'].include?(opts[:'sort_by'])
        fail ArgumentError, 'invalid value for "sort_by", must be one of modified_at, created_at'
      end
      # resource path
      local_var_path = "/v1/shipments"

      # query parameters
      query_params = {}
      query_params[:'batch_id'] = opts[:'batch_id'] if !opts[:'batch_id'].nil?
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?
      query_params[:'shipment_status'] = opts[:'shipment_status'] if !opts[:'shipment_status'].nil?
      query_params[:'modified_at_start'] = opts[:'modified_at_start'] if !opts[:'modified_at_start'].nil?
      query_params[:'modified_at_end'] = opts[:'modified_at_end'] if !opts[:'modified_at_end'].nil?
      query_params[:'created_at_start'] = opts[:'created_at_start'] if !opts[:'created_at_start'].nil?
      query_params[:'created_at_end'] = opts[:'created_at_end'] if !opts[:'created_at_end'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_dir'] = opts[:'sort_dir'] if !opts[:'sort_dir'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListShipmentResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShipmentsApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param shipment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :pagesize 
    # @return [ShipmentResponseErrors]
    def list_errors(shipment_id, opts = {})
      data, _status_code, _headers = list_errors_with_http_info(shipment_id, opts)
      return data
    end

    # 
    # 
    # @param shipment_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :pagesize 
    # @return [Array<(ShipmentResponseErrors, Fixnum, Hash)>] ShipmentResponseErrors data, response status code and response headers
    def list_errors_with_http_info(shipment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShipmentsApi.list_errors ..."
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling ShipmentsApi.list_errors"
      end
      # resource path
      local_var_path = "/v1/shipments/{shipment_id}/errors".sub('{' + 'shipment_id' + '}', shipment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pagesize'] = opts[:'pagesize'] if !opts[:'pagesize'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ShipmentResponseErrors')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShipmentsApi#list_errors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param shipment_id 
    # @param tag 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_tag(shipment_id, tag, opts = {})
      remove_tag_with_http_info(shipment_id, tag, opts)
      return nil
    end

    # 
    # 
    # @param shipment_id 
    # @param tag 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_tag_with_http_info(shipment_id, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShipmentsApi.remove_tag ..."
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling ShipmentsApi.remove_tag"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling ShipmentsApi.remove_tag"
      end
      # resource path
      local_var_path = "/v1/shipments/{shipment_id}/tags/{tag}".sub('{' + 'shipment_id' + '}', shipment_id.to_s).sub('{' + 'tag' + '}', tag.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShipmentsApi#remove_tag\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param shipment_id 
    # @param shipment 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update(shipment_id, shipment, opts = {})
      update_with_http_info(shipment_id, shipment, opts)
      return nil
    end

    # 
    # 
    # @param shipment_id 
    # @param shipment 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_with_http_info(shipment_id, shipment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ShipmentsApi.update ..."
      end
      # verify the required parameter 'shipment_id' is set
      if @api_client.config.client_side_validation && shipment_id.nil?
        fail ArgumentError, "Missing the required parameter 'shipment_id' when calling ShipmentsApi.update"
      end
      # verify the required parameter 'shipment' is set
      if @api_client.config.client_side_validation && shipment.nil?
        fail ArgumentError, "Missing the required parameter 'shipment' when calling ShipmentsApi.update"
      end
      # resource path
      local_var_path = "/v1/shipments/{shipment_id}".sub('{' + 'shipment_id' + '}', shipment_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(shipment)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ShipmentsApi#update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
