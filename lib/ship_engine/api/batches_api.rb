=begin
#ShipEngine

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module ShipEngine
  class BatchesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # 
    # @param batch_id 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def add_to_batch(batch_id, request, opts = {})
      add_to_batch_with_http_info(batch_id, request, opts)
      return nil
    end

    # 
    # 
    # @param batch_id 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def add_to_batch_with_http_info(batch_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BatchesApi.add_to_batch ..."
      end
      # verify the required parameter 'batch_id' is set
      if @api_client.config.client_side_validation && batch_id.nil?
        fail ArgumentError, "Missing the required parameter 'batch_id' when calling BatchesApi.add_to_batch"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling BatchesApi.add_to_batch"
      end
      # resource path
      local_var_path = "/v1/batches/{batch_id}/add".sub('{' + 'batch_id' + '}', batch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchesApi#add_to_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Batch]
    def create(request, opts = {})
      data, _status_code, _headers = create_with_http_info(request, opts)
      return data
    end

    # 
    # 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Batch, Fixnum, Hash)>] Batch data, response status code and response headers
    def create_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BatchesApi.create ..."
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling BatchesApi.create"
      end
      # resource path
      local_var_path = "/v1/batches"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Batch')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchesApi#create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param batch_id 
    # @param [Hash] opts the optional parameters
    # @return [Batch]
    def get(batch_id, opts = {})
      data, _status_code, _headers = get_with_http_info(batch_id, opts)
      return data
    end

    # 
    # 
    # @param batch_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Batch, Fixnum, Hash)>] Batch data, response status code and response headers
    def get_with_http_info(batch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BatchesApi.get ..."
      end
      # verify the required parameter 'batch_id' is set
      if @api_client.config.client_side_validation && batch_id.nil?
        fail ArgumentError, "Missing the required parameter 'batch_id' when calling BatchesApi.get"
      end
      # resource path
      local_var_path = "/v1/batches/{batch_id}".sub('{' + 'batch_id' + '}', batch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Batch')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchesApi#get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param external_batch_id 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_by_external_id(external_batch_id, opts = {})
      get_by_external_id_with_http_info(external_batch_id, opts)
      return nil
    end

    # 
    # 
    # @param external_batch_id 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def get_by_external_id_with_http_info(external_batch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BatchesApi.get_by_external_id ..."
      end
      # verify the required parameter 'external_batch_id' is set
      if @api_client.config.client_side_validation && external_batch_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_batch_id' when calling BatchesApi.get_by_external_id"
      end
      # resource path
      local_var_path = "/v1/batches/external_batch_id/{external_batch_id}".sub('{' + 'external_batch_id' + '}', external_batch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchesApi#get_by_external_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status 
    # @option opts [Integer] :page 
    # @option opts [Integer] :page_size 
    # @option opts [String] :sort_dir 
    # @option opts [String] :sort_by 
    # @return [ListBatchResponse]
    def list(opts = {})
      data, _status_code, _headers = list_with_http_info(opts)
      return data
    end

    # 
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status 
    # @option opts [Integer] :page 
    # @option opts [Integer] :page_size 
    # @option opts [String] :sort_dir 
    # @option opts [String] :sort_by 
    # @return [Array<(ListBatchResponse, Fixnum, Hash)>] ListBatchResponse data, response status code and response headers
    def list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BatchesApi.list ..."
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['open', 'queued', 'processing', 'completed', 'completed_with_errors', 'archived', 'notifying', 'invalid'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of open, queued, processing, completed, completed_with_errors, archived, notifying, invalid'
      end
      if @api_client.config.client_side_validation && opts[:'sort_dir'] && !['asc', 'desc'].include?(opts[:'sort_dir'])
        fail ArgumentError, 'invalid value for "sort_dir", must be one of asc, desc'
      end
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !['ship_date', 'processed_at'].include?(opts[:'sort_by'])
        fail ArgumentError, 'invalid value for "sort_by", must be one of ship_date, processed_at'
      end
      # resource path
      local_var_path = "/v1/batches"

      # query parameters
      query_params = {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'sort_dir'] = opts[:'sort_dir'] if !opts[:'sort_dir'].nil?
      query_params[:'sort_by'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListBatchResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchesApi#list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param batch_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :pagesize 
    # @return [BatchResponseErrors]
    def list_errors(batch_id, opts = {})
      data, _status_code, _headers = list_errors_with_http_info(batch_id, opts)
      return data
    end

    # 
    # 
    # @param batch_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page 
    # @option opts [Integer] :pagesize 
    # @return [Array<(BatchResponseErrors, Fixnum, Hash)>] BatchResponseErrors data, response status code and response headers
    def list_errors_with_http_info(batch_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BatchesApi.list_errors ..."
      end
      # verify the required parameter 'batch_id' is set
      if @api_client.config.client_side_validation && batch_id.nil?
        fail ArgumentError, "Missing the required parameter 'batch_id' when calling BatchesApi.list_errors"
      end
      # resource path
      local_var_path = "/v1/batches/{batch_id}/errors".sub('{' + 'batch_id' + '}', batch_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'pagesize'] = opts[:'pagesize'] if !opts[:'pagesize'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BatchResponseErrors')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchesApi#list_errors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param batch_id 
    # @param process_batch_request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def process(batch_id, process_batch_request, opts = {})
      process_with_http_info(batch_id, process_batch_request, opts)
      return nil
    end

    # 
    # 
    # @param batch_id 
    # @param process_batch_request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def process_with_http_info(batch_id, process_batch_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BatchesApi.process ..."
      end
      # verify the required parameter 'batch_id' is set
      if @api_client.config.client_side_validation && batch_id.nil?
        fail ArgumentError, "Missing the required parameter 'batch_id' when calling BatchesApi.process"
      end
      # verify the required parameter 'process_batch_request' is set
      if @api_client.config.client_side_validation && process_batch_request.nil?
        fail ArgumentError, "Missing the required parameter 'process_batch_request' when calling BatchesApi.process"
      end
      # resource path
      local_var_path = "/v1/batches/{batch_id}/process/labels".sub('{' + 'batch_id' + '}', batch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(process_batch_request)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchesApi#process\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # 
    # @param batch_id 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_from_batch(batch_id, request, opts = {})
      remove_from_batch_with_http_info(batch_id, request, opts)
      return nil
    end

    # 
    # 
    # @param batch_id 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def remove_from_batch_with_http_info(batch_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: BatchesApi.remove_from_batch ..."
      end
      # verify the required parameter 'batch_id' is set
      if @api_client.config.client_side_validation && batch_id.nil?
        fail ArgumentError, "Missing the required parameter 'batch_id' when calling BatchesApi.remove_from_batch"
      end
      # verify the required parameter 'request' is set
      if @api_client.config.client_side_validation && request.nil?
        fail ArgumentError, "Missing the required parameter 'request' when calling BatchesApi.remove_from_batch"
      end
      # resource path
      local_var_path = "/v1/batches/{batch_id}/remove".sub('{' + 'batch_id' + '}', batch_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json', 'text/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = ['api-key']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchesApi#remove_from_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
