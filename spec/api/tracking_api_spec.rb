=begin
#ShipEngine

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for ShipEngineApi::TrackingApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TrackingApi' do
  before do
    # run before each test
    @instance = ShipEngineApi::TrackingApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TrackingApi' do
    it 'should create an instance of TrackingApi' do
      expect(@instance).to be_instance_of(ShipEngineApi::TrackingApi)
    end
  end

  # unit tests for tracking_start_tracking
  # 
  # 
  # @param api_key API Key
  # @param [Hash] opts the optional parameters
  # @option opts [String] :carrier_code 
  # @option opts [String] :tracking_number 
  # @return [nil]
  describe 'tracking_start_tracking test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for tracking_stop_tracking
  # 
  # 
  # @param api_key API Key
  # @param [Hash] opts the optional parameters
  # @option opts [String] :carrier_code 
  # @option opts [String] :tracking_number 
  # @return [nil]
  describe 'tracking_stop_tracking test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for tracking_track
  # 
  # 
  # @param api_key API Key
  # @param [Hash] opts the optional parameters
  # @option opts [String] :carrier_code 
  # @option opts [String] :tracking_number 
  # @return [TrackingInformation]
  describe 'tracking_track test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
